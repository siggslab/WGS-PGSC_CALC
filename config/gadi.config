// Set gadi parameters
// NCI has special install of Nextflow. See: https://opus.nci.org.au/display/DAE/Nextflow
// See https://www.nextflow.io/docs/latest/config.html#scope-params 
params {
	gadi_account = System.getenv("PROJECT")
	storage_account = ''
	whoami = 'whoami'.execute().text.trim()
	singularityCacheDir = ''
}

// Autodetect relevant Singularity env variables 
singularity {
	enabled = true
	autoMounts = true
	autoCleanUp = true
	cacheDir = params.singularityCacheDir ? params.singularityCacheDir
        : "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity"

// Autodetect Singularity libraryDir. See: https://nextflow.io/docs/edge/container.html#singularity-docker-hub 
	libraryDir = params.singularityCacheDir ? params.singularityCacheDir
        : "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity"		
	temp = "/scratch/${params.gadi_account}/${params.whoami}/.nextflow/singularity/temp"	
}

// Set default resources for each process 
// See https://www.nextflow.io/docs/latest/config.html?highlight=withname#scope-process 
process {
	module = 'singularity'
	cache = 'lenient'
	executor = 'pbspro'
	project = "${params.gadi_account}"
	// Enable provision of multiple storage paths for -lstorage directive
	storage = ''
  storage = 'scratch/${params.gadi_account}+gdata/${params.gadi_account}'
  ext.storageAccountString = { 
		accountString -> accountString.tokenize(',')
		.collect { acct ->"scratch/${acct}+gdata/${acct}"
    }.join('+')
  }

  if (params.storage_account) {
    storage = "scratch/${params.gadi_account}+gdata/${params.gadi_account}+${ext.storageAccountString(params.storage_account)}"
  } 
	else {
    storage = "scratch/${params.gadi_account}+gdata/${params.gadi_account}"
  } 

// Set process-specific resource configuration
// See: https://nextflow.io/docs/edge/config.html#process-selectors
  withName: 'download_scorefiles' {
    cpus = 1
    time = '30m'
    memory = '1GB'
    queue = 'copyq'
  }
  withName: 'generate_PRS_snp_positions_list' {
    cpus = 2
    time = '15m'
    memory = '16GB'
  }
  withName: 'remove_chr_from_BAM' {
    cpus = 4
    time = '20m'
    memory = '16GB'
  }
  withName: 'pgsc_calc'{
    cpus = 4
    time = '1h'
    memory = '32GB'
  }
  withName: 'GATK_haplotype_caller' {
    cpus = 16
    time = '1h'
    memory = '32GB'
  }
  withName: 'GATK_genotype_GVCFs' {
    cpus = 4
    time = '10m'
    memory = '32GB'
  }
  withName: 'make_samplesheet' {
    cpus = 1
    time = '10m'
    memory = '4GB'
  }
}
  

// Write custom trace file with outputs required for SU calculation
// Output process execution trace file
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
trace {
    enabled = true
    overwrite = false
    file = "${params.outdir}/runInfo/trace-${trace_timestamp}.tsv"
    fields = 'task_id,hash,native_id,name,status,exit,submit,duration,realtime,cpus,%cpu,memory,%mem,rss,peak_rss,peak_vmem,rchar,wchar,workdir'
}